17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25,
25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30)"]])
gapfill_normalize <- function(){
#-------------------------------------------------
#Define a function to gapfill and z-normalize the timeseries
#-------------------------------------------------
gapfill_znorm <- function(Site){
#-------------------------------------------------
#Formatting the data
#-------------------------------------------------
#Make a complete set of dates ignoring leap years
full_dates <- setNames(
data.frame(unique(Site[, "SiteID"]), c(1:365), stringsAsFactors = FALSE),
c("SiteID", "doy")
)
#Merge the average timeseries to the full dates
ts_full <- merge(
full_dates,
Site[, c("doy", "mean_SpC")],
by = "doy",
all.x = TRUE
)
#-------------------------------------------------
#Gap-filling and z normalization of the data
#-------------------------------------------------
#Predict missing values
#(AT PRESENT GAPS ARE VERY SMALL, SO JUST LINEARLY INTERPOLATE)
predicted <- approx(
x = ts_full[, "doy"],
y = ts_full[, "mean_SpC"],
xout = ts_full[, "doy"],
rule = 2
)
#Gap-filling with the linearly interpolated data
ts_full$SpC_filled <- ts_full[, "mean_SpC"]
ts_full[is.na(ts_full[, "mean_SpC"]), "SpC_filled"] <- predicted$y[is.na(ts_full[, "mean_SpC"])]
#Defining a function for z normalization
znorm <- function(timeseries, var){
ts.mean <- mean(timeseries[, var], na.rm = TRUE)
ts.dev <- sd(timeseries[, var], na.rm = TRUE)
(timeseries[, var] - ts.mean)/ts.dev
}
#Z normalize the average year
ts_full$SpC_norm <- znorm(ts_full, "SpC_filled")
#-------------------------------------------------
#Get the final output
#-------------------------------------------------
#Reorder the columns to get the final output
final <- ts_full[, c("SiteID", "doy", "mean_SpC", "SpC_filled", "SpC_norm")]
#Changing "mean_SpC" column name for consistent formatting
colnames(final)[which(names(final) == "mean_SpC")] <- "SpC_mean"
return(final)
} #End gapfill_znorm function
gapfill_znorm <- function(Site){
#-------------------------------------------------
#Formatting the data
#-------------------------------------------------
#Make a complete set of dates ignoring leap years
full_dates <- setNames(
data.frame(unique(Site[, "SiteID"]), c(1:365), stringsAsFactors = FALSE),
c("SiteID", "doy")
)
#Merge the average timeseries to the full dates
ts_full <- merge(
full_dates,
Site[, c("doy", "mean_SpC")],
by = "doy",
all.x = TRUE
)
#-------------------------------------------------
#Gap-filling and z normalization of the data
#-------------------------------------------------
#Predict missing values
#(AT PRESENT GAPS ARE VERY SMALL, SO JUST LINEARLY INTERPOLATE)
predicted <- approx(
x = ts_full[, "doy"],
y = ts_full[, "mean_SpC"],
xout = ts_full[, "doy"],
rule = 2
)
#Gap-filling with the linearly interpolated data
ts_full$SpC_filled <- ts_full[, "mean_SpC"]
ts_full[is.na(ts_full[, "mean_SpC"]), "SpC_filled"] <- predicted$y[is.na(ts_full[, "mean_SpC"])]
#Defining a function for z normalization
znorm <- function(timeseries, var){
ts.mean <- mean(timeseries[, var], na.rm = TRUE)
ts.dev <- sd(timeseries[, var], na.rm = TRUE)
(timeseries[, var] - ts.mean)/ts.dev
}
#Z normalize the average year
ts_full$SpC_norm <- znorm(ts_full, "SpC_filled")
#-------------------------------------------------
#Get the final output
#-------------------------------------------------
#Reorder the columns to get the final output
final <- ts_full[, c("SiteID", "doy", "mean_SpC", "SpC_filled", "SpC_norm")]
#Changing "mean_SpC" column name for consistent formatting
colnames(final)[which(names(final) == "mean_SpC")] <- "SpC_mean"
return(final)
} #End gapfill_znorm function
#-------------------------------------------------
#Gap-filling and z-normalizing the timeseries
#-------------------------------------------------
#Read in the compiled set of timeseries
compiled_ts <- readRDS(here::here("data", "Example_avgTS_PSavoy.rds"))
View(compiled_ts)
#Replacing SiteID since it was a factor
#compiled_ts$SiteID <- paste(compiled_ts[, "SiteID"])
compiled_ts$SiteID <- as.character(compiled_ts$SiteID)
#Split the data by site
#site_split <- split(compiled_ts, compiled_ts[, "SiteID"])
site_split <- split(compiled_ts, compiled_ts$SiteID)
#Apply the function to all timeseries
normalized <- lapply(site_split, FUN = gapfill_znorm)
View(normalized)
#Save the output
saveRDS(normalized, here::here("output", "normalized.rds"))
gapfill_normalize <- function(){
#-------------------------------------------------
#Define a function to gapfill and z-normalize the timeseries
#-------------------------------------------------
gapfill_znorm <- function(Site){
#-------------------------------------------------
#Formatting the data
#-------------------------------------------------
#Make a complete set of dates ignoring leap years
full_dates <- setNames(
data.frame(unique(Site[, "SiteID"]), c(1:365), stringsAsFactors = FALSE),
c("SiteID", "doy")
)
#Merge the average timeseries to the full dates
ts_full <- merge(
full_dates,
Site[, c("doy", "mean_SpC")],
by = "doy",
all.x = TRUE
)
#-------------------------------------------------
#Gap-filling and z normalization of the data
#-------------------------------------------------
#Predict missing values
#(AT PRESENT GAPS ARE VERY SMALL, SO JUST LINEARLY INTERPOLATE)
predicted <- approx(
x = ts_full[, "doy"],
y = ts_full[, "mean_SpC"],
xout = ts_full[, "doy"],
rule = 2
)
#Gap-filling with the linearly interpolated data
ts_full$SpC_filled <- ts_full[, "mean_SpC"]
ts_full[is.na(ts_full[, "mean_SpC"]), "SpC_filled"] <- predicted$y[is.na(ts_full[, "mean_SpC"])]
#Defining a function for z normalization
znorm <- function(timeseries, var){
ts.mean <- mean(timeseries[, var], na.rm = TRUE)
ts.dev <- sd(timeseries[, var], na.rm = TRUE)
(timeseries[, var] - ts.mean)/ts.dev
}
#Z normalize the average year
ts_full$SpC_norm <- znorm(ts_full, "SpC_filled")
#-------------------------------------------------
#Get the final output
#-------------------------------------------------
#Reorder the columns to get the final output
final <- ts_full[, c("SiteID", "doy", "mean_SpC", "SpC_filled", "SpC_norm")]
#Changing "mean_SpC" column name for consistent formatting
colnames(final)[which(names(final) == "mean_SpC")] <- "SpC_mean"
return(final)
} #End gapfill_znorm function
#-------------------------------------------------
#Gap-filling and z-normalizing the timeseries
#-------------------------------------------------
#Read in the compiled set of timeseries
compiled_ts <- readRDS(here::here("data", "Example_avgTS_PSavoy.rds"))
#Replacing SiteID since it was a factor
#compiled_ts$SiteID <- paste(compiled_ts[, "SiteID"])
compiled_ts$SiteID <- as.character(compiled_ts$SiteID)
#Split the data by site
#site_split <- split(compiled_ts, compiled_ts[, "SiteID"])
site_split <- split(compiled_ts, compiled_ts$SiteID)
#Apply the function to all timeseries
normalized <- lapply(site_split, FUN = gapfill_znorm)
#Save the output
saveRDS(normalized, here::here("output", "normalized.rds"))
} #End gapfill_normalize wrapper
gapfill_normalize()
?approx
source(here::here("R", "executables", "gapfill_normalize.R"))
#-------------------------------------------------
#Stacking normalized, magnitude, and filled data into one object
#-------------------------------------------------
#Read in the gap-filled and z-normalized timeseries
normalized <- readRDS(here::here("output", "normalized.rds"))
#Stack the timeseries
stacked_timeseries <- lapply(
paste("SpC", c("_norm", "_mean", "_filled"), sep = ""),
FUN = compiling,
ts_list = normalized
)
#-------------------------------------------------
#Defining functions to compile and get rownames for the data
#-------------------------------------------------
#Defining a function to extract and transpose the data
transpose_func <- function(Site, var){
#Get only the variable of interest
var_sub <- Site[, var]
#Transpose the data
var_t <- t(var_sub)
colnames(var_t) <- paste0("v",  Site[, "doy"])
return(var_t)
} #End transpose_func
#Define a wrapper function to compile the timeseries
compiling <- function(ts_list, var){
#Compile the transposed data for all sites
compiled <- do.call(rbind, lapply(ts_list, FUN = transpose_func, var = var))
row.names(compiled) <- names(ts_list)
return(compiled)
} #End compiling function
#-------------------------------------------------
#Stacking normalized, magnitude, and filled data into one object
#-------------------------------------------------
#Read in the gap-filled and z-normalized timeseries
normalized <- readRDS(here::here("output", "normalized.rds"))
#Stack the timeseries
stacked_timeseries <- lapply(
paste("SpC", c("_norm", "_mean", "_filled"), sep = ""),
FUN = compiling,
ts_list = normalized
)
names(stacked_timeseries) <- c("normalized", "values", "filled_values")
#Save the output
saveRDS(stacked_timeseries, here::here("output", "stacked_timeseries.rds"))
View(stacked_timeseries)
View(stacked_timeseries[["normalized"]])
View(stacked_timeseries[["normalized"]])
View(stacked_timeseries[["values"]])
source(here::here("R", "executables", "gapfill_normalize.R"))
source(here::here("R", "executables", "stacking_timeseries.R"))
#Reading in the stacked timeseries data
stacked_timeseries <- readRDS(here::here("output", "stacked_timeseries.rds"))
?tsclust
#Using the updated tsclust function instead
tsclust_results <- dtwclust::tsclust(
stacked_timeseries[["normalized"]],
type = "hierarchical",
k = 2L:10L, # need help understanding this
distance = "dtw",
control = hierarchical_control(method = "complete"),
args = tsclust_args(dist = list(window.size = 14L)) # need to confirm window size
)
#Cycling over all cluster numbers an calculating a suite of cluster validation indices
names(tsclust_results) <- paste("s_",c(2:10), sep = "") #name columns based on # clusters
View(tsclust_results)
?sapply
?cvi
vi <- sapply(tsclust_results, cvi, type = "internal")
View(vi)
#-------------------------------------------------
#Plotting validity indicies and determining the optimum # of clusters
#-------------------------------------------------
#Silhouette index (max)
plot(vi["Sil", ], ylab = "Silhouette index", xlab = "# Clusters", pch = 20, col = "grey60")
#Dunn Index (max)
plot(vi["D", ], ylab = "Dunn index", xlab = "# Clusters", pch = 20, col = "grey60")
#COP index (min)
plot(vi["COP", ], ylab = "COP index", xlab = "# Clusters", pch = 20, col = "grey60")
#Davies-Bouldin index (min)
plot(vi["DB", ], ylab = "Davies-Bouldin index", xlab = "# Clusters", pch = 20, col = "grey60")
#Davies-Bouldin* (min)
plot(vi["DBstar", ], ylab = "DB*", xlab = "# Clusters", pch = 20, col = "grey60")
#Calinksi-Harabasz (max)
plot(vi["CH", ], ylab = "Calinksi-Harabasz index", xlab = "# Clusters", pch = 20, col = "grey60")
#Define funcitons to extract the optimal number of clusters
opt_max <- function(index){unlist(strsplit(colnames(vi)[which.max(vi[index, ])], "_"))[2]}
opt_min <- function(index){unlist(strsplit(colnames(vi)[which.min(vi[index, ])], "_"))[2]}
#Bind the cluster validity indices together
cvi_bound <- setNames(data.frame(
c("Sil", "D", "COP", "DB", "DBstar", "CH"),
c(opt_max("Sil"), opt_max("D"), opt_min("COP"), opt_min("DB"), opt_min("DBstar"), opt_max("CH"))
), c("CVI", "optimum_clusters"))
#-------------------------------------------------
#Sourcing in functions to use for making dendrogram plots
#-------------------------------------------------
source(here::here("R", "functions", "plot_dendrogram.R"))
source(here::here("R", "functions", "quantile_plots.R"))
#-------------------------------------------------
#Reading in the data
#-------------------------------------------------
#Reading in stacked time series
stacked_timeseries <- readRDS(here::here("output", "stacked_timeseries.rds"))
source(here::here("R", "executables", "gapfill_normalize.R"))
source(here::here("R", "executables", "stacking_timeseries.R"))
source(here::here("R", "executables", "calc_dtw_distance.R"))
#===============================================================================
#Calculating the DTW distance matrix
#Created 10/8/2020
#===============================================================================
library("dtw") #For doing the dynamic time warping
#Reading in the stacked timeseries data
stacked_timeseries <- readRDS(here::here("output", "stacked_timeseries.rds"))
#Calculating the DTW distance matrix using the sakoe-chiba constraint and a window size of 14
dtw_distance_matrix <- dist(
stacked_timeseries[["normalized"]],
method = "DTW",
window.type = "sakoechiba",
window.size = 14
)
#Save the output
saveRDS(distance_matrix, here::here("output", "dtw_distance_matrix.rds"))
#Save the output
saveRDS(dtw_distance_matrix, here::here("output", "dtw_distance_matrix.rds"))
#Calculating the DTW distance matrix using the sakoe-chiba constraint and a window size of 14
dtw_distance_matrix <- dist(
stacked_timeseries[["normalized"]],
method = "DTW",
window.type = "sakoechiba",
window.size = 14
)
print(dtw_distance_matrix)
calc_dtw_distance()
calc_dtw_distance <- function(){
#Reading in the stacked timeseries data
stacked_timeseries <- readRDS(here::here("output", "stacked_timeseries.rds"))
#Calculating the DTW distance matrix using the sakoe-chiba constraint and a window size of 14
dtw_distance_matrix <- dist(
stacked_timeseries[["normalized"]],
method = "DTW",
window.type = "sakoechiba",
window.size = 14
)
#Save the output
saveRDS(dtw_distance_matrix, here::here("output", "dtw_distance_matrix.rds"))
# had to add "dtw_" before distance_matrix in the first arg.
} #End calc_distance_matrix wrapper
calc_dtw_distance()
#################### Lauren Bolotin - bolotinljb@gmail.com ##############################################################
## Link project data with land cover, geology, etc. via NHD ComID (Wieczorek & Schwarz 2019)
#########################################################################################################################
library(tidyverse)
## Bring in files that have SiteID's and ComID's
setwd("/Volumes/Blaszczak Lab/FSS/All Data")
USGS <- readRDS("USGS_SC_ComID.rds")
WQP <- readRDS("WQP_SC_ComID.rds")
rm(USGS, WQP)
## Bring in the NHD Attribute Data
# downloaded at https://www.sciencebase.gov/catalog/item/5669a79ee4b08895842a1d47
# National Land Cover Database (2016)
# individual reach catchment proportional land cover
setwd("/Volumes/Blaszczak Lab/FSS/NLCD/NLCD16_CAT_CONUS")
nlcd_cat <- read.csv("NLCD16_CAT_CONUS.csv")
nlcd_cat <- subset(nlcd_cat, nlcd_cat$COMID %in% usgs_comid$COMID)
## Bring in files that have SiteID's and ComID's
# I am keeping USGS and WQP separate for now
setwd("/Volumes/Blaszczak Lab/FSS/All Data")
usgs_comid <- readRDS("USGS_SC_ComID.rds")
wqp_comid <- readRDS("WQP_SC_ComID.rds")
nlcd_cat <- subset(nlcd_cat, nlcd_cat$COMID %in% usgs_comid$COMID)
View(nlcd_cat)
## Bring in the NHD Attribute Data
# downloaded at https://www.sciencebase.gov/catalog/item/5669a79ee4b08895842a1d47
# National Land Cover Database (2016)
# individual reach catchment proportional land cover
# setwd("/Volumes/Blaszczak Lab/FSS/NLCD/NLCD16_CAT_CONUS")
# nlcd_cat <- read.csv("NLCD16_CAT_CONUS.csv")
# head(nlcd_cat)
# nlcd_cat <- subset(nlcd_cat, nlcd_cat$COMID %in% usgs_comid$COMID)
# reach catchments accumulated upstream through the river network
setwd("/Volumes/Blaszczak Lab/FSS/NLCD")
nlcd_acc <- read.csv("NLCD16_ACC_CONUS.csv")
head(nlcd_acc)
nlcd_acc <- subset(nlcd_acc, nlcd_acc$COMID %in% usgs_comid)
nlcd_acc <- read.csv("NLCD16_ACC_CONUS.csv")
nlcd_acc <- subset(nlcd_acc, nlcd_acc$COMID %in% usgs_comid$COMID)
usgs_nlcd <- merge(usgs_comid, nlcd_acc, by = "COMID", all = TRUE)
View(usgs_nlcd)
# rename columns to describe land use classes
namse(usgs_nlcd)
# rename columns to describe land use classes
names(usgs_nlcd)
colnames(usgs_nlcd) <- c("COMID", "SiteID", "OpenWater_pct", "PerennialIceSnow_pct",
"DevelopedOpenSpace_pct", "DevelopedLowIntensity_pct",
"DevelopedMedIntensity_pct", "DevelopedHiIntensity_pct", "BarrenLand_pct",
"DeciduousForest_pct", "EvergreenForest_pct", "MixedForest_pct",
"ShrubScrub_pct", "GrasslandHerbaceous_pct", "PastureHay_pct",
"CultivatedCrops_pct", "WoodyWetlands_pct", "EmergentHerbWetlands_pct",
"NoData")
View(usgs_comid)
View(usgs_nlcd)
setwd("/Volumes/Blaszczak Lab/FSS/All Data")
View(usgs_nlcd)
saveRDS(usgs_nlcd, "USGS_SC_NLCD.rds")
## Follow same procedure for WQP data and for other catchment attributes
setwd("/Volumes/Blaszczak Lab/FSS/NLCD")
nlcd_acc <- read.csv("NLCD16_ACC_CONUS.csv")
nlcd_acc <- subset(nlcd_acc, nlcd_acc$COMID %in% wqp_comid$COMID) # the number of rows should be = to the number of rows in usgs_comid
unique(wqp_comid$COMID)
# Create one df with all necessary info
wqp_nlcd <- merge(wqp_comid, nlcd_acc, by = "COMID", all = TRUE)
# Rename columns to describe land use classes
names(wqp_nlcd)
colnames(usgs_nlcd) <- c("COMID", "SiteID", "OpenWater_pct", "PerennialIceSnow_pct",
"DevelopedOpenSpace_pct", "DevelopedLowIntensity_pct",
"DevelopedMedIntensity_pct", "DevelopedHiIntensity_pct", "BarrenLand_pct",
"DeciduousForest_pct", "EvergreenForest_pct", "MixedForest_pct",
"ShrubScrub_pct", "GrasslandHerbaceous_pct", "PastureHay_pct",
"CultivatedCrops_pct", "WoodyWetlands_pct", "EmergentHerbWetlands_pct",
"NoData")
colnames(wqp_nlcd) <- c("COMID", "SiteID", "OpenWater_pct", "PerennialIceSnow_pct",
"DevelopedOpenSpace_pct", "DevelopedLowIntensity_pct",
"DevelopedMedIntensity_pct", "DevelopedHiIntensity_pct", "BarrenLand_pct",
"DeciduousForest_pct", "EvergreenForest_pct", "MixedForest_pct",
"ShrubScrub_pct", "GrasslandHerbaceous_pct", "PastureHay_pct",
"CultivatedCrops_pct", "WoodyWetlands_pct", "EmergentHerbWetlands_pct",
"NoData")
setwd("/Volumes/Blaszczak Lab/FSS/All Data")
setwd("/Volumes/Blaszczak Lab/FSS/All Data")
saveRDS(nhd_attr, "WQP_SC_NLCD.rds")
saveRDS(wqp_nlcd, "WQP_SC_NLCD.rds")
View(wqp_nlcd)
setwd("/Volumes/Blaszczak Lab/FSS/All Data")
SC <- readRDS("USGS_SC_sites.rds")
Q <- readRDS("USGS_disch_sites.rds")
dat <- readRDS("all_SC_data.rds")
dat <- subset(dat, dat$Source == "USGS")
dat <- unique(dat$SiteID)
head(Q)
Q$Site_ID <- ifelse(Q$Site_ID < 10000000, paste0("0", Q$Site_ID), paste0(Q$Site_ID))
Q$Site_ID <- as.numeric(as.character(Q$Site_ID))
Q$Site_ID <- ifelse(Q$Site_ID < 10000000, paste0("0", Q$Site_ID), paste0(Q$Site_ID))
Q$Site_ID <- paste0("USGS-", Q$Site_ID)
colnames(Q)[1] <- "SiteID"
Q <- subset(Q, Q$SiteID %in% dat)
dat <- readRDS("all_SC_data.rds")
dat <- subset(dat, dat$Source == "USGS")
dat <- unique(dat$SiteID) %>%
as.data.frame()
View(dat)
Q <- readRDS("USGS_disch_sites.rds")
Q$Site_ID <- as.numeric(as.character(Q$Site_ID))
Q$Site_ID <- ifelse(Q$Site_ID < 10000000, paste0("0", Q$Site_ID), paste0(Q$Site_ID))
Q$Site_ID <- paste0("USGS-", Q$Site_ID)
colnames(Q)[1] <- "SiteID"
Q <- subset(Q, Q$SiteID %in% dat$.)
View(Q)
library(tidyverse)
head(Q)
Q <- select(Q, c("SiteID", "huc_cd", "parm_cd", "begin_date", "end_date"))
Q <- subset(Q, Q$SiteID %in% dat$.)
Q <- unique(Q)
View(Q)
Q <- select(Q, c("SiteID", "huc_cd", "parm_cd"))
Q <- subset(Q, Q$SiteID %in% dat$.)
Q <- unique(Q)
noQ <- setdiff(dat$., Q$SiteID)
pring(noQ)
print(noQ)
dat <- readRDS("all_SC_data.rds")
dat <- subset(dat, dat$Source == "USGS")
dat_sites <- unique(dat$SiteID) %>%
as.data.frame()
noQ <- setdiff(dat_sites$., Q$SiteID)
print(noQ)
sub <- subset(dat, dat$)
sub <- subset(dat, dat$SiteID %in% noQ)
View(sub)
Q <- readRDS("USGS_disch_sites.rds")
Q$Site_ID <- as.numeric(as.character(Q$Site_ID))
Q$Site_ID <- ifelse(Q$Site_ID < 10000000, paste0("0", Q$Site_ID), paste0(Q$Site_ID))
Q$Site_ID <- paste0("USGS-", Q$Site_ID)
colnames(Q)[1] <- "SiteID"
Qsites <- select(Q, c("SiteID", "huc_cd", "parm_cd"))
Qsites <- subset(Qsites, Qsites$SiteID %in% dat_sites$.)
Qsites <- unique(Qsites)
noQ <- setdiff(dat_sites$., Qsites$SiteID)
subQ <- subset(Q, Q$SiteID %in% noQ)
